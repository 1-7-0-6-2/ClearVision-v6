// Mixin Collection by Zerthox

/// Prefix a property with a set of prefixes
/// @param {string} $property - property name
/// @param {*} $value... - property value
/// @param {list} $prefixes [(webkit, moz, ms)] - list of prefixes
@mixin prefix($property, $value...) {
	$p: if(length(prefixes) == 0, $prefixes, (webkit, moz, ms));
	@if type-of($property) == map {
		$prefixes: if($value, $value, $prefixes);
		@each $k in map-keys($property) {
			@each $e in $p {
				#{'-' + $e + '-' + $k}: map-get($property, $k);
			}
			#{$k}: map-get($property, $k);
		}
	}
	@else {
		@each $e in $p {
			#{'-' + $e + '-' + $property}: $value;
		}
		#{$property}: $value;
	}
}

/// Set prefixed keyframes in one mixin
/// @param {*} $a - animation name
/// @content [keyframe content]
@mixin keyframes($a) {
	@-webkit-keyframes #{$a} {
		@content;
	}
	@keyframes #{$a} {
		@content;
	}
}

/// Set background properties in one mixin
/// @param {*} $color [null] - background-color property value
/// @param {*} $image [null] - background-image property value
/// @param {*} $img [null] - background-image property value (alternative param)
/// @param {*} $size [null] - background-size property value
/// @param {*} $position [null] - background-position property value
/// @param {*} $pos [null] - background-position property value (alternative param)
/// @param {*} $repeat [null] - background-repeat property value
@mixin bg($color: null, $image: null, $img: null, $size: null, $position: null, $pos: null, $repeat: null) {
	$image: if($image, $image, $img);
	$position: if($position, $position, $pos);
	@if $color {
		background-color: #{$color};
	}
	@if $image {
		background-image: #{$image};
	}
	@if $size {
		background-size: #{$size};
	}
	@if $position {
		background-position: #{$position};
	}
	@if $repeat {
		background-repeat: #{$repeat};
	}
}

/// Set one or multiple pseudo elements in one mixin
/// @param {string} $a... - list of pseudo element selectors
/// @content [pseudo element content]
@mixin pseudo($a...) {
	$l: ();
	@each $p in $a {
		$l: append($l, "&:#{$p}", comma);
		$l: append($l, "&::#{$p}", comma);
	}
	#{$l} {
		@content;
	}
}

/// Set position properties in a single mixin
/// @param {*} $top [null] - top property value
/// @param {*} $right [null] - right property value
/// @param {*} $bottom  [null]- bottom property value
/// @param {*} $left [null] - left property value
@mixin pos($top: null, $right: null, $bottom: null, $left: null) {
	@if $top {
		top: $top;
	}
	@if $right {
		right: $right;
	}
	@if $bottom {
		bottom: $bottom;
	}
	@if $left {
		left: $left;
	}
}

/// Set display property to flex with prefixes
@mixin display-flex {
	display: -webkit-flex;
	display: -ms-flexbox;
	display: flex;
}

/// Set flex-direction property with prefixes
/// @param {*} $a - flex-direction property value
@mixin flex-direction($a) {
	-webkit-flex-direction: $a;
	-ms-flex-direction: $a;
	flex-direction: $a;
}

/// Set flex property with prefixes
/// @param {*} $a - flex property value
@mixin flex($a) {
	-webkit-flex: $a;
	-ms-flex: $a;
	flex: $a;
}

/// Set flex-grow property with prefixes
/// @param {*} $a - flex-grow property value
@mixin flex-grow($a) {
	-webkit-flex-grow: $a;
	-ms-flex-grow: $a;
	flex-grow: $a;
}

/// Set flex-shrink property with prefixes
/// @param {*} $a - flex-shrink property value
@mixin flex-shrink($a) {
	-webkit-flex-shrink: $a;
	-ms-flex-shrink: $a;
	flex-shrink: $a;
}

/// Set flex-basis property with prefixes
/// @param {*} $a - flex-basis property value
@mixin flex-basis($a) {
	-webkit-flex-basis: $a;
	-ms-flex-basis: $a;
	flex-basis: $a;
}

/// Set flex-wrap property with prefixes
/// @param {*} $a - flex-wrap property value
@mixin flex-wrap($a) {
	-webkit-flex-wrap: $a;
	-ms-flex-wrap: $a;
	flex-wrap: $a;
}

/// Set justify-content property with prefixes
/// @param {*} $a - justify-content property value
@mixin justify-content($a) {
	-webkit-justify-content: $a;
	-ms-flex-pack: $a;
	@if $a == start or $a == end {
		justify-content: flex- + $a;
	}
	@else {
		justify-content: $a;
	}
}

/// Set align-items property with prefixes
/// @param {*} $a - align-items property value
@mixin align-items($a) {
	-webkit-box-align: $a;
	-ms-flex-align: $a;
	@if $a == start or $a == end {
		align-items: flex- + $a;
	}
	@else {
		align-items: $a;
	}
}

/// Set align-self property with prefixes
/// @param {*} $a - align-self property value
@mixin align-self($a) {
	-webkit-align-self: $a;
	-ms-align-self: $a;
	align-self: $a;
}

/// Set animation property with prefixes
/// @param {*} $a... - animation property value
@mixin animation($a...) {
	-webkit-animation: $a;
	animation: $a;
}

/// Set transform property with prefixes
/// @param {*} $a - transfom property value
@mixin transform($a) {
	-webkit-transform: $a;
	-ms-transform: $a;
	transform: $a;
}

/// Set filter property with prefixes
/// @param {*} $a - filter property value
@mixin filter($a) {
	-webkit-filter: $a;
	filter: $a;
}

/// Set user-select property with prefixes
/// @param {*} $a - user-select property value
@mixin user-select($a) {
	-webkit-user-select: $a;
	-moz-user-select: $a;
	-ms-user-select: $a;
	user-select: $a;
}

/// Specify a new web-hosted font via @font-face
/// @param {*} $name - font name
/// @param {*} $url [null] - font source (as url)
/// @param {*} $format [null] - font file format
/// @param {*} $weight [null] - font-weight value
/// @param {*} $style [null] - font-style value
/// @param {*} $decoration [null] - font-decoration value
@mixin font($name, $local: null, $url: null, $format: null, $weight: null, $style: null, $decoration: null) {
	@font-face {
		font-family: $name;
		@if $url != null and $format != null {
			src: url($url) format($format);
		}
		@else if $url != null {
			src: url($url);
		}
		@else {
			@content;
		}
		@if variable-exists(weight) {
			font-weight: $weight;
		}
		@if variable-exists(style) {
			font-style: $style;
		}
		@if variable-exists(decoration) {
			font-decoration: $decoration;
		}
	}
}