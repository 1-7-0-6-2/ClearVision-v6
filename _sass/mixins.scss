// Mixin Collection by Zerthox

/// Set background properties in one mixin
/// @param {*} $color [null] - background-color property value
/// @param {*} $image [null] - background-image property value
/// @param {*} $img [null] - background-image property value (alternative param)
/// @param {*} $position [null] - background-position property value
/// @param {*} $pos [null] - background-position property value (alternative param)
/// @param {*} $size [null] - background-size property value
/// @param {*} $repeat [null] - background-repeat property value
/// @param {*} $rep [null] - background-repeat property value (alternative param)
/// @param {*} $attachment [null] - background-attachment property value
/// @param {*} $attach [null] - background-attachment property value (alternative param)
@mixin bg($image: null, $color: null, $repeat: null, $position: null, $size: null, $attachment: null, $img: null, $rep: null, $pos: null, $attach: null) {
	$image: if($image, $image, $img);
	$repeat: if($repeat, $repeat, $rep);
	$position: if($position, $position, $pos);
	$attachment: if($attachment, $attachment, $attach);
	@if $image {
		$bg: ();
		$bg: append($bg, $image, space);
		@if $color {
			$bg: append($bg, $color, space);
		}
		@if $repeat {
			$bg: append($bg, $repeat, space);
		}
		@if $position and $size {
			$bg: append($bg, #{$position}/#{$size}, space);
		}
		@else if $position {
			$bg: append($bg, $position, space);
		}
		@else if $size {
			$bg: append($bg, $size, space);
		}
		@if $attachment {
			$bg: append($bg, $attachment, space);
		}
		background: #{$bg};
	}
	@else {
		@if $color {
			background-color: #{$color};
		}
		@if $repeat {
			background-repeat: #{$repeat};
		}
		@if $position {
			background-position: #{$position};
		}
		@if $size {
			background-size: #{$size};
		}
		@if $attachment {
			background-attachment: #{$attachment};
		}
	}
}

/// Set one or multiple pseudo elements in one mixin
/// @param {string} $a... - list of pseudo element selectors
/// @content [pseudo element content]
@mixin pseudo($a...) {
	$l: ();
	@each $p in $a {
		$l: append($l, "&:#{$p}", comma);
	}
	#{$l} {
		@content;
	}
}

/// Set position properties in a single mixin
/// @param {*} $top [null] - top property value
/// @param {*} $right [null] - right property value
/// @param {*} $bottom  [null]- bottom property value
/// @param {*} $left [null] - left property value
@mixin pos($top: null, $right: null, $bottom: null, $left: null) {
	@if $top {
		top: $top;
	}
	@if $right {
		right: $right;
	}
	@if $bottom {
		bottom: $bottom;
	}
	@if $left {
		left: $left;
	}
}

/// Specify a new web-hosted font via @font-face
/// @param {*} $name - font name
/// @param {*} $url [null] - font source (as url)
/// @param {*} $format [null] - font file format
/// @param {*} $weight [null] - font-weight value
/// @param {*} $style [null] - font-style value
/// @param {*} $decoration [null] - font-decoration value
@mixin font($name, $local: null, $url: null, $format: null, $weight: null, $style: null, $decoration: null) {
	@font-face {
		font-family: $name;
		@if $url != null and $format != null {
			src: url($url) format($format);
		}
		@else if $url != null {
			src: url($url);
		}
		@else {
			@content;
		}
		@if variable-exists(weight) {
			font-weight: $weight;
		}
		@if variable-exists(style) {
			font-style: $style;
		}
		@if variable-exists(decoration) {
			font-decoration: $decoration;
		}
	}
}