// Mixin Collection by Zerthox

/// Set background properties in one mixin
/// @param {*} $color [null] - background-color property value
/// @param {*} $clr [null] - background-color property value (alternative param)
/// @param {*} $image [null] - background-image property value
/// @param {*} $img [null] - background-image property value (alternative param)
/// @param {*} $position [null] - background-position property value
/// @param {*} $pos [null] - background-position property value (alternative param)
/// @param {*} $size [null] - background-size property value
/// @param {*} $repeat [null] - background-repeat property value
/// @param {*} $rep [null] - background-repeat property value (alternative param)
/// @param {*} $attachment [null] - background-attachment property value
/// @param {*} $attach [null] - background-attachment property value (alternative param)
@mixin bg($color: null, $image: null, $repeat: null, $position: null, $size: null, $attachment: null, $clr: null, $img: null, $rep: null, $pos: null, $attach: null) {
	$img: $image or $img;
	$clr: $color or $clr;
	$rep: $repeat or $rep;
	$pos: $position or $pos;
	$attach: $attachment or $attach;
	$bg: ();
	@if $img and $img != inherit {
		$bg: append($bg, $img, space);
		@if $clr and $clr != inherit {
			$bg: append($bg, $clr, space);
		}
		@if $rep and $rep != inherit {
			$bg: append($bg, $rep, space);
		}
		@if $pos and $pos != inherit {
			@if $size and $size != inherit {
				$bg: append($bg, #{$pos}/#{$size}, space);
			}
			@else {
				$bg: append($bg, $pos, space);
			}
		}
		@if $attach and $attach != inherit {
			$bg: append($bg, $attach, space);
		}
		background: #{$bg};
	}
	@else if $img {
		background-image: #{$img};
	}
	@if $clr and not index($bg, $clr) {
		background-color: #{$clr};
	}
	@if $rep and not index($bg, $rep) {
		background-repeat: #{$rep};
	}
	@if $pos and not (index($bg, $pos) or index($bg, #{$pos}/#{$size})) {
		background-position: #{$pos};
	}
	@if $size and not index($bg, #{$pos}/#{$size}) {
		background-size: #{$size};
	}
	@if $attach and not index($bg, $attach) {
		background-attachment: #{$attach};
	}
}

/// Set position properties in a single mixin
/// @param {*} $top [null] - top property value
/// @param {*} $right [null] - right property value
/// @param {*} $bottom  [null]- bottom property value
/// @param {*} $left [null] - left property value
@mixin pos($top: null, $right: null, $bottom: null, $left: null) {
	@if $top {
		top: $top;
	}
	@if $right {
		right: $right;
	}
	@if $bottom {
		bottom: $bottom;
	}
	@if $left {
		left: $left;
	}
}

/// Specify a new web-hosted font via @font-face
/// @param {*} $name - font name
/// @param {*} $url [null] - font source (as url)
/// @param {*} $format [null] - font file format
/// @param {*} $weight [null] - font-weight value
/// @param {*} $style [null] - font-style value
/// @param {*} $decoration [null] - font-decoration value
@mixin font($name, $local: null, $url: null, $format: null, $weight: null, $style: null, $decoration: null) {
	@font-face {
		font-family: $name;
		@if $url != null and $format != null {
			src: url($url) format($format);
		}
		@else if $url != null {
			src: url($url);
		}
		@else {
			@content;
		}
		@if variable-exists(weight) {
			font-weight: $weight;
		}
		@if variable-exists(style) {
			font-style: $style;
		}
		@if variable-exists(decoration) {
			font-decoration: $decoration;
		}
	}
}